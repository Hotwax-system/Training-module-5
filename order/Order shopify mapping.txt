Shopify to OMS Field Mapping
  Order_header :
 
Shopify Field
	UDM Table
	Column Name
	id
	order_header
	order_id
	name
	order_header
	order_name
	created_at
	order_header
	order_date or entry_date
	currency
	order_header
	currency_uom
	presentment_currency
	order_header
	presentment_currency_uom
	total_price
	order_header
	grand_total
	subtotal_price
	order_header
	remaining_sub_total
	source_name
	order_header
	sales_channel_enum_id or web_site_id
	Order_item :
Shopify Field
	UDM Table
	Column Name
	line_items[].id
	order_item
	order_item_seq_id(auto created)
	line_items[].product_id
	order_item
	product_id
	line_items[].title
	order_item
	title or item_description
	line_items[].quantity
	order_item
	quantity
	line_items[].price
	order_item
	unit_price
	line_items[].sku
	order_item
	sku
	











Order_adjustment : 
Shopify Field
	UDM Table
	Column Name
	discount_applications[].title
	order_adjustment
	description
	discount_applications[].value
	order_adjustment
	amount
	discount_applications[].type
	order_adjustment
	order_adjustment_type_id (e.g., promotion, discount)
	  Order_payment_preference : 
Shopify Field
	UDM Table
	Column Name
	payment_gateway_names[]
	order_payment_preference
	payment_method_type_id
	total_price
	order_payment_preference
	presentment_amount
	presentment_currency
	order_payment_preference
	presentment_currency_uom
	 Order_status : 
Shopify Field
	UDM Table
	Column Name
	financial_status
	order_status
	status_id
	created_at
	order_status
	status_datetime
	user_id or webhook user
	order_status
	status_user_login
	Pseudo-code Logic for Product Integration
Step 1: Retrieve Order Data from Shopify API
* Call the Shopify Product API using REST client /admin/api/2025-07/orders.json?ids=<ids>
* Parse the response JSON
* Loop through each product item in the response
Step 2: Parse Shopify Order API Response
* Validate the response structure (must contain id, line_items, customer, etc.)
* Extract key data: order, customer, line items, shipping/billing address, discounts, status, etc.
Step 3: For Each Order
1. Insert into order_header
* Use order.id as external_id
* Store order.name, order_date, grand_total, status_id
2. Insert order_item records
* For each line_item, generate order_item_seq_id
* Use sku, quantity, unit_price, title
3. Insert order_adjustment
* If discount exists, insert record with order_adjustment_type_id = DISCOUNT
4. Insert order_contact_mech
* Create two records: billing & shipping
* Ensure ContactMech and PostalAddress are created with correct purpose
5. Insert order_payment_preference
* Use financial_status, currency, payment mode, etc.
6. Insert or update Party, Person, ContactMech
* Based on customer.email
* Avoid duplicates with lookup on email